===================  OPERATORS ========================

Evaluate the expression in a step by step way based on operator precedence and associativity.

1) printf("%d\n",1==5==5);
   -> 1 == 5 == 5
   -> 0 == 5
   FINAL O/P : 0
   
2) int i = 0;
   printf("%d %d",i,i++);
   -> i++ = 0
   -> i = 1
   FINAL O/P : 1 0
   
3) int x=5;
   printf("%d %d %d\n",x++,x++,x++);
   -> x++ = 5
   -> x++ = 6
   -> x++ = 7
   FINAL O/P : 7 6 5
   
4) int x=2;
   printf("%d   ",++x++);
   -> x++ = 2
   -> ++x++ = error : lvalue required
   -> printf("%d\n",x++);
   FIANL O/P : ERROR : LVALUE IS REQUIRED
   
5) int k = 1;
   printf("%d==1 is ""%s\n",k,k==1?"TRUE":"FALSE");
   -> k == 1?"TRUE":"FALSE" = "TRUE"
   -> k = 1
   -> %d = 1 => 1 == 1
   -> %s = TRUE
   FINAL O/P : 1 == 1 IS TRUE
   
6) int i = 5;
   i = i++ - --i + ++i;
   -> i = 5 - 5 + 6
   -> i = 0 + 6
   -> i = 6
   
7) int a = 7;
   a += a += a -= 6;
   -> a = a - 6
   -> a = 7 - 6
   -> a = 1
   -> a = a + a
   -> a = 1 + 1 = 2
   -> a = a + a
   -> a = 2 + 2
   -> a = 4
   printf("%d\n",a);
   FINAL O/P : 4
   
8) int x = 10,y = 5,p,q;
   p = x > 9;
   q = p || (x = 5, y = 10);
   -> p = 10 > 9
   -> p = 1
   -> q = p || ( x = 5, y = 10)
   -> q = 1 || (x = 5, y = 10)    //Since first condition is true logical OR will not evaluate second condition. so x = 10 and y = 5 only
   -> q = 1
   -> q = 1
   printf("%d %d %d\n",q,x,y);
   FINAL O/P : 1 10 5
   
9) int x=2,y=1;
   y += x <<= 2;
   -> x = x << 2
   -> x = 2 << 2
   -> x = 8
   -> y = y + x
   -> y = 1 + 8
   -> y = 9 
   printf("%d %d\n",x,y);
   FINAL O/P : 8 9 
   
10) int x=2,y=4,z;
    z=y++*x++|y--;
    -> z = 4 * 2 | 5
    -> z = 8 | 5
    -> z = 13
    printf("%d\n",z);
    FINAL O/P : 13
    
11) int a=5,b=6,c=7,d;
    d=a&=b&=c&&a;
    -> d = a &= b &= 7 && 5
    -> d = a &= b &= 1
    -> d = a &= b = b & 1
    -> d = a &= b = 0
    -> d = a = a & 0
    -> d = a = 0
    -> d = 0
    printf("%d\n",d);
    FINAL O/P : 0
    
12) int i=10;
    i=(10<10)?(10>=10)?(10<=10)?1:2:3:4;
    -> i = (10 < 10) ? (10 >= 10) ? 1:3:4
    -> i = (10 < 10) ? 1 : 4
    -> i = 4
    printf("%d\n",i);
    FINAL O/P : 4
    
13) int a=10,b=20;
    a=(a>5||b=6?40:50);
    -> a = ( 10 > 5 || b = 6 ? 40 : 50)
    -> a = ( 1 || 20 = 6 ? 40 : 50)
    -> 20 = 6 gives error because lvalue is required here, both cannot be constants
    FINAL O/P : ERROR - LVALUE IS REQUIRED
    
14) printf("%x\n",-1>>4);
    -> -1>>4
    -> -1
    -> -1 in decimal, But -1 in hexadecimal will be ffffffff
    FINAL O/P : ffffffff
    
    printf("%x\n",-1<<4);
    -> -1<<4
    -> -16 in decimal
    -> -16 in hexadecimal will be fffffff0
    FINAL O/P : fffffff0
    
15) int x=7;
    x=(x<<=x%2);
    -> x = (x = 7 << 7 % 2)
    -> x = (x = 7 << 1)
    -> x = (x = 14)
    -> x = 14
    printf("%d\n",x);
    FINAL O/P : 14
    
16) int a=2,b=5,c=1;
    printf("%d\n",(b>=a>=c?1:0));
    -> b >= a >= c ? 1 : 0
    -> b >= 2 >= 1 ? 1 : 0
    -> b >= 1
    -> 5 >= 1
    -> 1
    FINAL O/P : 1
    
17) int a=5;
    a=a-~a +1;
    -> a = 5 - ~5 + 1
    -> a = 5 - (-6) + 1
    -> a = 5 + 6 + 1
    -> a = 12
    printf("%d\n",a);
    FINAL O/P : 12
    
18) a=b=c=1;
    x=--a||++b*(3-1)/2&&b*(--c/3);
    -> x = --a || ++b * 2 / 2 && b * 0
    -> x = 0 || 2 * 2 / 2 && 0
    -> x = 0 || 4 / 2 && 0
    -> x = 0 || 2 && 0
    -> x = 2 && 0
    -> x = 0
    printf("%d\n",x);
    FINAL O/P : 0
    
19) a=10
    b = -5
    c = 2.5
    printf("%d %d",sizeof(a) + sizeof((++b) *c, b);
    -> b = -5
    -> sizeof(10) + sizeof(-4) * 2.5
    -> 4 + 4 * 2.5
    -> 4 + 10
    -> 14
    Since in printf %d is used to print 1st value -> it will print integer value of 14.000000
    If it lf -> it will print 14.000000
    and b = -5
     
20) int i=5;
    i=i++ - i;
    -> i = 5 - 6
    -> i = -1   
    printf("%d",i);
    FINAL O/P : -1
















